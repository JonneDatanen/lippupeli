{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getQuiz","selectedCountries","countries","sort","Math","random","slice","correctIndex","floor","map","country","index","isCorrect","Peli","useState","right","total","stop","stats","setStats","quiz","setQuiz","buttons","option","key","disabled","isClicked","onClick","guess","correctAnswer","find","nimi","firstAnswer","undefined","numQuestions","answer","src","q","kuva","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iooBAOMA,EAAU,WACd,IACIC,EADoBC,EAAUC,MAAK,iBAAM,GAAMC,KAAKC,YACdC,MAAM,EAL/B,GAMbC,EAAeH,KAAKI,MANP,EAMaJ,KAAKC,UAMnC,OAJAJ,EAAoBA,EAAkBQ,KAAI,SAACC,EAASC,GAAV,sBACnCD,EADmC,CAC1BE,UAAWD,IAAUJ,QAMxB,SAASM,IAAQ,IAAD,EACHC,mBAAS,CAAEC,MAAO,EAAGC,MAAO,EAAGC,MAAM,IADlC,mBACtBC,EADsB,KACfC,EADe,OAELL,mBAASd,KAFJ,mBAEtBoB,EAFsB,KAEhBC,EAFgB,KAwBzBC,EAAUF,EAAKX,KAAI,SAACc,EAAQZ,GAAT,OACrB,4BACEa,IAAKb,EACLc,SAAUF,EAAOG,UACjBC,QAAS,kBAxBE,SAACC,GACd,IAAMC,EAAgBT,EAAKU,MAAK,SAACP,GAAD,OAAYA,EAAOQ,OAASH,KAAOhB,UAC7DoB,OAA0DC,IAA5Cb,EAAKU,MAAK,SAACP,GAAD,OAAYA,EAAOG,aAE7CG,GACFV,EAAS,CACPJ,MAAOiB,EAAcd,EAAMH,MAAQ,EAAIG,EAAMH,MAC7CC,MAAOE,EAAMF,MAAQ,EACrBC,KAAqBiB,GAAfhB,EAAMF,QAEdK,EAAQrB,MAERqB,EACED,EAAKX,KAAI,SAACc,GAAD,OACPA,EAAOQ,OAASH,EAAhB,eAA6BL,EAA7B,CAAqCG,WAAW,IAASH,MAU9CY,CAAOZ,EAAOQ,QAE5BR,EAAOQ,SAIZ,OAAIb,EAAMD,KAEN,8CAEE,6BAFF,sBAGsBC,EAAMH,MAC1B,6BAJF,8BAKqBG,EAAMF,MAAQE,EAAMH,MACvC,6BACA,4BAAQY,QAAS,kBAAMR,EAAS,CAAEJ,MAAO,EAAGC,MAAO,EAAGC,MAAM,MAA5D,cAOF,oCACE,yCAAeC,EAAMF,MAAQ,GAC7B,yBAAKoB,IAAKhB,EAAKU,MAAK,SAACO,GAAD,OAAOA,EAAEzB,aAAW0B,OACxC,6BAAMhB,IC5DMiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7bedae0d.chunk.js","sourcesContent":["import React, { useState } from \"react\"\n\nimport countries from \"./countries.json\"\n\nconst numOptions = 3\nconst numQuestions = 10\n\nconst getQuiz = () => {\n  let shuffledCountries = countries.sort(() => 0.5 - Math.random())\n  let selectedCountries = shuffledCountries.slice(0, numOptions)\n  let correctIndex = Math.floor(Math.random() * numOptions)\n\n  selectedCountries = selectedCountries.map((country, index) => (\n    { ...country, isCorrect: index === correctIndex }\n  ))\n\n  return selectedCountries\n}\n\nexport default function Peli() {\n  const [stats, setStats] = useState({ right: 0, total: 0, stop: false })\n  const [quiz, setQuiz] = useState(getQuiz())\n\n  const answer = (guess) => {\n    const correctAnswer = quiz.find((option) => option.nimi === guess).isCorrect\n    const firstAnswer = quiz.find((option) => option.isClicked) === undefined\n\n    if (correctAnswer) {\n      setStats({\n        right: firstAnswer ? stats.right + 1 : stats.right,\n        total: stats.total + 1,\n        stop: stats.total == numQuestions - 1,\n      })\n      setQuiz(getQuiz())\n    } else {\n      setQuiz(\n        quiz.map((option) =>\n          option.nimi === guess ? { ...option, isClicked: true } : option\n        )\n      )\n    }\n  }\n\n  let buttons = quiz.map((option, index) => (\n    <button\n      key={index}\n      disabled={option.isClicked}\n      onClick={() => answer(option.nimi)}\n    >\n      {option.nimi}\n    </button>\n  ))\n\n  if (stats.stop) {\n    return (\n      <>\n        Valmis!\n        <br />\n        Oikeita vastauksia {stats.right}\n        <br />\n        Vääriä vastauksia {stats.total - stats.right}\n        <br />\n        <button onClick={() => setStats({ right: 0, total: 0, stop: false })}>\n          Uudelleen\n        </button>\n      </>\n    )\n  } else {\n    return (\n      <>\n        <div>Kysymys: {stats.total + 1}</div>\n        <img src={quiz.find((q) => q.isCorrect).kuva} />\n        <div>{buttons}</div>\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}